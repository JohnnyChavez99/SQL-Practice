Revising the Select Query I
MySQL
Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.

SELECT *
FROM CITY
WHERE POPULATION >100000 AND COUNTRYCODE = 'USA'

------------------
Revising the Select Query II
MySQL
Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

SELECT NAME
FROM CITY
WHERE COUNTRYCODE = 'USA' AND POPULATION >120000

-------------------
Select All
MySQL
Query all columns (attributes) for every row in the CITY table.

SELECT *
FROM CITY

-------------------
Select By ID
MySQL
Query all columns for a city in CITY with the ID 1661.

SELECT *
FROM CITY
WHERE ID = 1661

-------------------
Japanese Cities’ Attributes
MySQL
Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

SELECT *
FROM CITY
WHERE COUNTRYCODE = 'JPN'

-------------------
Japanese Cities’ Names
MySQL
Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.

SELECT NAME
FROM CITY
WHERE COUNTRYCODE = 'JPN'

-------------------
Weather Observation Station 1
MySQL
Query a list of CITY and STATE from the STATION table.

SELECT CITY, STATE
FROM STATION

-------------------
Weather Observation Station 2
MySQL
Query the sum of all values in LAT_N and the sum of all values in LONG_W both rounded to a scale of 2 decimal places from the STATION table.

SELECT ROUND(SUM(LAT_N),2), ROUND(SUM(LONG_W),2)
FROM STATION

-------------------
Weather Observation Station 3
MySQL
Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

SELECT DISTINCT(CITY)
FROM STATION
WHERE MOD(ID,2) = 0

-------------------
Weather Observation Station 4
MySQL
Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

SELECT COUNT(CITY)-COUNT(DISTINCT(CITY))
FROM STATION

-------------------
Weather Observation Station 5
MySQL
Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

(SELECT CITY, CHAR_LENGTH(CITY) 
 FROM STATION 
 ORDER BY CHAR_LENGTH(CITY) ASC, CITY ASC 
 LIMIT 1)
UNION
(SELECT CITY, CHAR_LENGTH(CITY)
 FROM STATION 
 ORDER BY CHAR_LENGTH(CITY) DESC, CITY ASC
 LIMIT 1)

-------------------
Weather Observation Station 6
MySQL
Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

SELECT CITY
FROM STATION
WHERE CITY LIKE "A%"
    OR CITY LIKE "E%"
    OR CITY LIKE "I%"
    OR CITY LIKE "O%"
    OR CITY LIKE "U%"

-------------------
Weather Observation Station 7
MySQL
Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT(CITY)
FROM STATION
WHERE CITY LIKE "%A"
    OR CITY LIKE "%E"
    OR CITY LIKE "%I"
    OR CITY LIKE "%O"
    OR CITY LIKE "%U"

-------------------
Weather Observation Station 8
MySQL
Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

SELECT DISTINCT(CITY)
FROM STATION
WHERE LEFT(CITY, 1) IN ("A", "E", "I", "O", "U")
    AND RIGHT(CITY, 1) IN ("A", "E", "I", "O", "U")

-------------------
Weather Observation Station 9
MySQL
Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

SELECT DISTINCT(CITY)
FROM STATION
WHERE LEFT(CITY, 1) NOT IN ("A", "E", "I", "O", "U")

-------------------
Weather Observation Station 10
MySQL
Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT(CITY)
FROM STATION
WHERE RIGHT(CITY, 1) NOT IN ("A", "E", "I", "O", "U")

-------------------
Weather Observation Station 11
MySQL
Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT(CITY)
FROM STATION
WHERE LEFT(CITY, 1) NOT IN ("A", "E", "I", "O", "U")
    OR RIGHT(CITY, 1) NOT IN ("A", "E", "I", "O", "U")

-------------------
Weather Observation Station 12
MySQL
Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT(CITY)
FROM STATION
WHERE LEFT(CITY, 1) NOT IN ("A", "E", "I", "O", "U")
    AND RIGHT(CITY, 1) NOT IN ("A", "E", "I", "O", "U")

-------------------
Higher Than 75 Marks
MYSQL
Query the Name of any student in STUDENTS who scored higher than Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

SELECT NAME
FROM STUDENTS
WHERE MARKS > 75
ORDER BY RIGHT(NAME, 3) ASC, ID

-------------------
Employee Names
MySQL
Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

SELECT NAME
FROM EMPLOYEE
ORDER BY NAME

-------------------
Employee Salaries
MySQL
Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than per month who have been employees for less than months. Sort your result by ascending employee_id.

SELECT NAME
FROM EMPLOYEE
WHERE SALARY > 2000 AND MONTHS < 10
ORDER BY EMPLOYEE_ID ASC

-------------------
African Cities
MySQL
Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.

SELECT CITY.NAME
FROM CITY
INNER JOIN COUNTRY
    ON CITY.COUNTRYCODE = COUNTRY.CODE
WHERE COUNTRY.CONTINENT = "Africa"

-------------------
Type of Triangle
MySQL
Write a query identifying the type of each record in the TRIANGLES table using its three side lengths.

SELECT
CASE
    WHEN A+B>C AND A+C>B AND B+C>A THEN
    CASE
        WHEN A = B AND A = C THEN "Equilateral"
        WHEN (A = B OR A = C) AND (A <> B OR A <> C) THEN "Isosceles"
        WHEN A <> B AND A <> C THEN "Scalene"
    END
    ELSE "Not A Triangle"
END AS TRIANGLETYPE
FROM TRIANGLES

-------------------
Revising Aggregations - The Count Function
MySQL
Query a count of the number of cities in CITY having a Population larger than .

SELECT COUNT(ID)
FROM CITY
WHERE POPULATION > 100000

-------------------
Revising Aggregations - The Sum Function
MySQL
Query the total population of all cities in CITY where District is California.

SELECT SUM(POPULATION)
FROM CITY
WHERE DISTRICT LIKE "CALIFORNIA"

-------------------
Revising Aggregations - Averages
MySQL
Query the average population of all cities in CITY where District is California.

SELECT AVG(POPULATION)
FROM CITY
WHERE DISTRICT = "CALIFORNIA"

-------------------
Average Population
MySQL
Query the average population for all cities in CITY, rounded down to the nearest integer.

SELECT FLOOR(AVG(POPULATION))
FROM CITY

-------------------
Japan Population
MySQL
Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

SELECT SUM(POPULATION)
FROM CITY
WHERE COUNTRYCODE = "JPN"

-------------------
Population Density Difference
MySQL
Query the difference between the maximum and minimum populations in CITY.

SELECT MAX(POPULATION)-MIN(POPULATION)
FROM CITY

-------------------
